// exports.generateThumbs = functions.storage.object().onFinalize(async (object: any) => {
//     const bucket = object.bucket;
//     const filePath = object.name;
//     const fileName = filePath.split('/').pop();
//     const bucketDir = dirname(filePath);

//     const workingDir = join(tmpdir(), 'thumbs');
//     const tmpFilePath = join(workingDir, fileName);
//     console.log('Salut : ' + tmpFilePath);
//     console.log('workingDirectory : ' + workingDir);
//     console.log('Bucket : ' + bucket);
//     console.log('FilePath : ' + filePath);
//     console.log('FileName : ' + fileName);
//     console.log('BucketDirectory ' + bucketDir);

//     if(fileName.includes('thumb@') || object.contentType.includes('image')) {
//         console.log('exiting function');
//         return false;
//     }

//     await fs.ensureDir(workingDir);
//     await bucket.file(filePath).download({
//         destination: tmpFilePath
//     });

    
    
//     const thumbName = `thumb@_${ fileName}`;
//     const thumbPath = join(workingDir, thumbName);

//     await sharp(tmpFilePath).resize(200, 200).toFile(thumbPath);

//     bucket.upload(thumbPath, {
//         destination: join(bucketDir, thumbName)
//     });
    
//     return fs.remove(workingDir);
// });

// const stripe = require('stripe')(functions.config().stripe.testkey);


// exports.StripeCharge = functions.firestore.document('payments/{paymentId}').onCreate((snap: any, context: any) => {
//     const dataPayment = snap.data();
//     if( !dataPayment || dataPayment.charge) return;

//     const paymentId = context.params.paymentId;
//     const userkey = dataPayment.userkey;
//     const amount = dataPayment.amount;
//     let timestamp = dataPayment.timestamp;
//     const idempotencyKey = paymentId;
//     const source = dataPayment.token.id;
//     const currency = 'eur';
//     const charge = {amount, currency, source};
//     let abonnement = "0";
//     let finpremium = 0;
//     let d = new Date(timestamp)
//     if (amount === 100) {
//         abonnement = "1";
//         finpremium = d.setMonth(d.getMonth() + 1);
//     } else if (amount === 300) {
//         abonnement = "3";
//         finpremium = d.setMonth(d.getMonth() + 3);
//     } else if (amount === 1200){
//         abonnement = "12";
//         finpremium = d.setMonth(d.getMonth() + 12); 
//     }
//     return stripe.charges.create(charge, { idempotencyKey }).then((charg: any) => {
//         const batch = db.batch();
//         const ref1 = db.doc(`payments/${paymentId}`);
//         const ref2 = db.doc(`users/${userkey}/payments/${paymentId}`);
//         const ref3 = db.doc(`users/${userkey}`);
//         batch.update(ref1, {charge: charg, statut: "success"});
//         batch.update(ref2, {charge: charg, statut: "success"});
//         batch.update(ref3, {premium: true, abonnement: abonnement, datefindepremium: finpremium});
//         batch.commit().then().catch((error: any) => console.log(error));
//     }).catch((error: any) => {
//         console.log(error);
//     });
// });









exports.generateThumbnails = functions.storage.object().onFinalize( async (object: any) => {
    
    const fileBucket = object.bucket;
    const filePath = object.name;
    const contentType = object.contentType;
    // Get the file name.
    const fileName = path.basename(filePath);

    // Exit if this is triggered on a file that is not an image.
    if (!contentType.startsWith('image/')) {
        console.log('This is not an image.');
        return;
    }
    // Exit if the image is not upload in medias/exercices/images/
    if (!filePath.startsWith('medias/exercices/images/')) {
        console.log('Image not uploaded in medias/exercices/images/');
        return;
    }
    // Exit if the image is already a thumbnail.
    if (fileName.startsWith(`thumb_`)) {
        console.log('Already a Thumbnail.');
        return;
    }

    // Download file from bucket.
    const bucket = admin.storage().bucket(fileBucket);
    const tempFilePath = path.join(os.tmpdir(), fileName);
    const metadata = {
    contentType: contentType,
    };
    await bucket.file(filePath).download({destination: tempFilePath});

    // Generate a thumbnail using ImageMagick
    await spawn('convert', [tempFilePath, '-thumbnail', '200x200>', tempFilePath]);
    //await sharp(tempFilePath).resize(200, 200).toFile(tempFilePath);
    console.log('Thumbnail created at', tempFilePath);

    // We add a 'thumb_' prefix to thumbnails file name. That's where we'll upload the thumbnail
    const thumbFileName = `thumb_${fileName}`;
    const thumbFilePath = path.join(path.dirname(filePath), thumbFileName);

    // Uploading the thumbnail
    await bucket.upload(tempFilePath, {
        destination: thumbFilePath,
        metadata: metadata,
    });
    const url = await thumbFilePath.getSignedUrl({
        action: 'read',
        expires: '03-09-2491'
    });
    console.log(url[0]);
    
    //const batch = db.batch();
    //const id = path.parse(fileName).name;
    //const ref = db.doc(`exercices/${id}`);

    //console.log(url[0], id);

    //batch.update(ref, {photoThumbnail: });
    //batch.commit().then().catch((error: any) => console.log(error));

    //Delete the local file to free up disk space
    return fs.unlinkSync(tempFilePath);
});



















/*
const bucketName = 'gs://arian-fitness.appspot.com';
const prefix = ['aliments/', 'medias/'];

function listFile(prefix$: any) {
    const { Storage } = require('@google-cloud/storage');
    const storage = new Storage();
    let files: any[] = [];
    return new Promise<any>((resolve, reject) => {
        storage.bucket(bucketName).getFiles({prefix: prefix$}).then((data: any) => {
            files = data[0];
            resolve(files);
        });     
    }); 
}

function copyFiles() {
    const { Storage } = require('@google-cloud/storage');
    const storage = new Storage();
    return new Promise<any>((resolve, reject) => {
        prefix.forEach(element => {
            listFile(element).then((files) => {
                files.forEach((file: any) => {
                    const today = new Date();
                    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
                    storage.bucket(bucketName)
                           .file(file.name)
                           .copy(storage.bucket(bucketName).file('backup/' + date + '/' + file.name));
                  });
                resolve();
            }).catch(() => console.log('Erreur'));
        });
        
    });
    
}



exports.scheduledExportStorageDev = functions.runWith({memory: '1GB', timeoutSeconds: 300}).pubsub.schedule('every 168 hours').onRun((context:any) => {
    return copyFiles().then(() => console.log('Copié avec succès')).catch(() => {
        console.log('Erreur lors de la sauvegarde');
    });
});


/*const firestore = require('@google-cloud/firestore');
const client = new firestore.v1.FirestoreAdminClient();
const bucket = 'gs://arian-fitness.appspot.com';

exports.scheduledExport = functions.pubsub.schedule('every 168 hours').onRun((context: any) => {
    const projectId = process.env.GCP_PROJECT || process.env.GCLOUD_PROJECT;
    const databaseName = client.databasePath(projectId, '(default)');

    return client.exportDocuments({
        name: databaseName,
        outputUriPrefix: bucket,
        collectionIds: []
    }).then((responses: any) => {
        const response = responses[0];
        console.log(`Operation Name : ${response['name']}`);
        return response;
    }).catch((err: any) => {
        console.log( err );
        throw new Error('Export operation failed')
    });
 });


 /*
gcloud projects add-iam-policy-binding arian-fitness \
    --member serviceAccount:arian-fitness@appspot.gserviceaccount.com \
    --role roles/datastore.importExportAdmin

gsutil iam ch serviceAccount:arian-fitness@appspot.gserviceaccount.com:admin \
    gs://arian-fitness.appspot.com
 */